<#@ template visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="NJsonSchema.CodeGeneration" #>
<#if(Model.HasDescription){#>/** <#=Model.Description#> */
<#}#>export class <#=Model.Class#><#=Model.Inheritance#> {<#foreach(var property in Model.Properties){#> 
<#if(property.HasDescription){#>    /** <#=property.Description#> */
<#}#>    <#if(property.IsDiscriminator){#>protected <#}#><#if(property.IsReadOnly){#>readonly <#}#><#=property.PropertyName#>: <#=property.Type#><#if(property.HasDefaultValue){#> = <#=property.DefaultValue#><#}#>;<#}#>


    constructor(data?: any) {
<#if(Model.HasInheritance){#>
        super(data);
<#}#>
<#if(Model.HasDiscriminator){#>
        this.<#=Model.DiscriminatorProperty.PropertyName#> = "<#=Model.Class#>";
<#}#>
        if (data !== undefined) {
<#foreach (var property in Model.Properties){#>
            <#=ConversionUtilities.Tab(property.DataConversionCode, 3)#>
<#}#>
        }
    }

<#if(Model.HasDiscriminator){
    foreach (var derivedClass in Model.DerivedClassNamesWithPropertyCheck){#>
    is<#=derivedClass#>(): this is <#=derivedClass#> { return this.<#=Model.DiscriminatorProperty.PropertyName#> === "<#=derivedClass#>"; }
<#  }#>
    is<#=Model.RealClass#>(): this is <#=Model.RealClass#> { return this.<#=Model.DiscriminatorProperty.PropertyName#> === "<#=Model.RealClass#>"; }
<#}#>

    static fromJS(data: any): <#=Model.RealClass#> {
<#if(Model.HasDiscriminator){
    foreach (var derivedClass in Model.DerivedClassNames){#>
        if (data["<#=Model.Discriminator#>"] === "<#=derivedClass#>")
            return new <#=derivedClass#>(data);
<#  }#>
        return new <#=Model.RealClass#>(data);
<#}else{#>
        return new <#=Model.RealClass#>(data);
<#}#>
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
<#foreach (var property in Model.Properties){#>
        <#=ConversionUtilities.Tab(property.DataBackConversionCode, 2)#>
<#} if(Model.HasInheritance){#>
        super.toJS(data);
<#}#>
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        var json = this.toJSON();
        return new <#=Model.RealClass#>(JSON.parse(json));
    }
}