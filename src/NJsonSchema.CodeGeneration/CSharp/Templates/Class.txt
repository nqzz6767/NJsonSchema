<if(hasDescription)>/// \<summary><description>\</summary>
<endif>public partial class <class> <inheritance>
{
<if(inpc)><properties:{property | 
    private <property.Type> _<property.FieldName>;
}><endif>
<properties:{property | 
<if(property.HasDescription)>    /// \<summary><property.Description>\</summary>
<endif>    [JsonProperty("<property.Name>", Required = <property.Required>)]
<if(property.IsStringEnum)>    [JsonConverter(typeof(StringEnumConverter))]
<endif>
    public <property.Type> <property.PropertyName><if(!inpc)> { get; set; \}<else>
    {
        get { return _<property.FieldName>; \}
        set 
        {
            if (_<property.FieldName> != value)
            {
                _<property.FieldName> = value; 
                RaisePropertyChanged();
            \}
        \}
    \}<endif>


}><if(inpc)>    public event PropertyChangedEventHandler PropertyChanged;

<endif>
    public string ToJson() 
    {
        return JsonConvert.SerializeObject(this);
    }
    
    public static <class> FromJson(string data)
    {
        return JsonConvert.DeserializeObject\<<class>>(data);
    }
<if(inpc)>
    
    protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null) 
            handler(this, new PropertyChangedEventArgs(propertyName));
    \}
<endif>
}