<#@ template visibility="internal" #>
[GeneratedCode("NJsonSchema", "<#=JsonSchema4.ToolchainVersion#>")]
internal class JsonInheritanceConverter : JsonConverter
{
    internal static readonly string DefaultDiscriminatorName = "discriminator";

    private readonly string _discriminator;
        
    [ThreadStatic]
    private static bool _isReading;

    [ThreadStatic]
    private static bool _isWriting;

    public JsonInheritanceConverter()
    {
        _discriminator = DefaultDiscriminatorName;
    }

    public JsonInheritanceConverter(string discriminator)
    {
        _discriminator = discriminator;
    }

    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        try
        {
            _isWriting = true;

            var jObject = JObject.FromObject(value, serializer);
            jObject.AddFirst(new JProperty(_discriminator, value.GetType().Name));
            writer.WriteToken(jObject.CreateReader());
        }
        finally
        {
            _isWriting = false;
        }
    }

    public override bool CanWrite
    {
        get
        {
            if (_isWriting)
            {
                _isWriting = false;
                return false; 
            }
            return true;
        }
    }

    public override bool CanRead
    {
        get
        {
            if (_isReading)
            {
                _isReading = false;
                return false;
            }
            return true;
        }
    }

    public override bool CanConvert(Type objectType)
    {
        return true;
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        var jObject = serializer.Deserialize<JObject>(reader);
        var discriminator = jObject.GetValue(_discriminator).Value<string>();
        var subtype = GetObjectSubtype(objectType, discriminator);

        try
        {
            _isReading = true;
            return serializer.Deserialize(jObject.CreateReader(), subtype);
        }
        finally
        {
            _isReading = false;
        }
    }

    private Type GetObjectSubtype(Type objectType, string discriminator)
    {
        var knownTypeAttributes = objectType.GetTypeInfo().GetCustomAttributes().Where(a => a.GetType().Name == "KnownTypeAttribute");
        dynamic knownTypeAttribute = knownTypeAttributes.SingleOrDefault(a => IsKnwonTypeTargetType(a, discriminator));
        if (knownTypeAttribute != null)
            return knownTypeAttribute.Type;

        var typeName = objectType.Namespace + "." + discriminator;
        return objectType.GetTypeInfo().Assembly.GetType(typeName);
    }

    private bool IsKnwonTypeTargetType(dynamic attribute, string discriminator)
    {
        return attribute?.Type.Name == discriminator;
    }
}