<#@ template visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="NJsonSchema.CodeGeneration" #>
<#@ import namespace="NJsonSchema.CodeGeneration.CSharp" #>
<#if(Model.HasDescription){#>/// <summary><#=ConversionUtilities.ConvertCSharpDocBreaks(Model.Description, 0)#></summary>
<#}#><#if(Model.HasDiscriminator){#>[JsonConverter(typeof(JsonInheritanceConverter), "<#=Model.Discriminator#>")]
<#}#>[JsonObject(MemberSerialization.OptIn)]
[GeneratedCode("NJsonSchema", "<#=JsonSchema4.ToolchainVersion#>")]
public partial class <#=Model.Class#> <#=Model.Inheritance#>
{<#if(Model.Inpc){#><#foreach(var property in Model.Properties){#> 
    private <#=property.Type#> <#=property.FieldName#><#if(property.HasDefaultValue){#> = <#=property.DefaultValue#><#}#>;<#}}#>


<#foreach(var property in Model.Properties){#>
<#if(property.HasDescription){#>    /// <summary><#=ConversionUtilities.ConvertCSharpDocBreaks(property.Description, 1)#></summary>
<#}#>    [JsonProperty("<#=property.Name#>", Required = <#=property.JsonPropertyRequired#>)]
<#if(property.RenderRequiredAttribute){#>    [Required]
<#}#><#if(property.IsStringEnum){#>    [JsonConverter(typeof(StringEnumConverter))]
<#}#>
    public <#=property.Type#> <#=property.PropertyName#><#if(!Model.Inpc){#> { get; set; }<#if(property.HasDefaultValue){#> = <#=property.DefaultValue#>;<#}#>
<#  }else{#>

    {
        get { return <#=property.FieldName#>; }
        set 
        {
            if (<#=property.FieldName#> != value)
            {
                <#=property.FieldName#> = value; 
                RaisePropertyChanged();
            }
        }
    }<#}#>


<#}#><#if(Model.Inpc){#>    public event PropertyChangedEventHandler PropertyChanged;

<#}#>
    public string ToJson() 
    {
        return JsonConvert.SerializeObject(this<#=Model.JsonConverters#>);
    }
    
    public static <#=Model.Class#> FromJson(string data)
    {
        return JsonConvert.DeserializeObject<<#=Model.Class#>>(data<#=Model.JsonConverters#>);
    }
<#if(Model.Inpc){#>
    
    protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null) 
            handler(this, new PropertyChangedEventArgs(propertyName));
    }
<#}#>
}