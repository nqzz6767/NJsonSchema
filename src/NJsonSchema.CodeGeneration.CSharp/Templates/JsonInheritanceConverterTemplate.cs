// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NJsonSchema.CodeGeneration.CSharp.Templates
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Data\Projects\NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\Templates\JsonInheritanceConverterTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    internal partial class JsonInheritanceConverterTemplate : JsonInheritanceConverterTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("[System.CodeDom.Compiler.GeneratedCode(\"NJsonSchema\", \"");
            
            #line 2 "C:\Data\Projects\NJsonSchema\src\NJsonSchema.CodeGeneration.CSharp\Templates\JsonInheritanceConverterTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(JsonSchema4.ToolchainVersion));
            
            #line default
            #line hidden
            this.Write("\")]\r\ninternal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter\r\n{\r\n" +
                    "    internal static readonly string DefaultDiscriminatorName = \"discriminator\";\r" +
                    "\n\r\n    private readonly string _discriminator;\r\n        \r\n    [System.ThreadStat" +
                    "ic]\r\n    private static bool _isReading;\r\n\r\n    [System.ThreadStatic]\r\n    priva" +
                    "te static bool _isWriting;\r\n\r\n    public JsonInheritanceConverter()\r\n    {\r\n    " +
                    "    _discriminator = DefaultDiscriminatorName;\r\n    }\r\n\r\n    public JsonInherita" +
                    "nceConverter(string discriminator)\r\n    {\r\n        _discriminator = discriminato" +
                    "r;\r\n    }\r\n\r\n    public override void WriteJson(Newtonsoft.Json.JsonWriter write" +
                    "r, object value, Newtonsoft.Json.JsonSerializer serializer)\r\n    {\r\n        try\r" +
                    "\n        {\r\n            _isWriting = true;\r\n\r\n            var jObject = Newtonso" +
                    "ft.Json.Linq.JObject.FromObject(value, serializer);\r\n            jObject.AddFirs" +
                    "t(new Newtonsoft.Json.Linq.JProperty(_discriminator, value.GetType().Name));\r\n  " +
                    "          writer.WriteToken(jObject.CreateReader());\r\n        }\r\n        finally" +
                    "\r\n        {\r\n            _isWriting = false;\r\n        }\r\n    }\r\n\r\n    public ove" +
                    "rride bool CanWrite\r\n    {\r\n        get\r\n        {\r\n            if (_isWriting)\r" +
                    "\n            {\r\n                _isWriting = false;\r\n                return fals" +
                    "e; \r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public ove" +
                    "rride bool CanRead\r\n    {\r\n        get\r\n        {\r\n            if (_isReading)\r\n" +
                    "            {\r\n                _isReading = false;\r\n                return false" +
                    ";\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public overr" +
                    "ide bool CanConvert(System.Type objectType)\r\n    {\r\n        return true;\r\n    }\r" +
                    "\n\r\n    public override object ReadJson(Newtonsoft.Json.JsonReader reader, System" +
                    ".Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serialize" +
                    "r)\r\n    {\r\n        var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JOb" +
                    "ject>(reader);\r\n        if (jObject == null)\r\n            return null;\r\n\r\n      " +
                    "  var discriminator = Newtonsoft.Json.Linq.Extensions.Value<string>(jObject.GetV" +
                    "alue(_discriminator));\r\n        var subtype = GetObjectSubtype(jObject, objectTy" +
                    "pe, discriminator);\r\n\r\n        try\r\n        {\r\n            _isReading = true;\r\n " +
                    "           return serializer.Deserialize(jObject.CreateReader(), subtype);\r\n    " +
                    "    }\r\n        finally\r\n        {\r\n            _isReading = false;\r\n        }\r\n " +
                    "   }\r\n\r\n    private System.Type GetObjectSubtype(Newtonsoft.Json.Linq.JObject jO" +
                    "bject, System.Type objectType, string discriminator)\r\n    {\r\n        if (objectT" +
                    "ype.Name == discriminator)\r\n            return objectType;\r\n\r\n        var knownT" +
                    "ypeAttributesSubtype = GetSubtypeFromKnownTypeAttributes(objectType, discriminat" +
                    "or);\r\n        if (knownTypeAttributesSubtype != null)\r\n            return knownT" +
                    "ypeAttributesSubtype;\r\n\r\n        var typeName = objectType.Namespace + \".\" + dis" +
                    "criminator;\r\n        var subtype = System.Reflection.IntrospectionExtensions.Get" +
                    "TypeInfo(objectType).Assembly.GetType(typeName);\r\n        if (subtype != null)\r\n" +
                    "            return subtype;\r\n\r\n        var typeInfo = jObject.GetValue(\"$type\");" +
                    "\r\n        if (typeInfo != null)\r\n            return System.Type.GetType(Newtonso" +
                    "ft.Json.Linq.Extensions.Value<string>(typeInfo));\r\n\r\n        throw new System.In" +
                    "validOperationException(\"Could not find subtype of \'\" + objectType.Name + \"\' wit" +
                    "h discriminator \'\" + discriminator + \"\'.\");\r\n    }\r\n\r\n    private System.Type Ge" +
                    "tSubtypeFromKnownTypeAttributes(System.Type objectType, string discriminator)\r\n " +
                    "   {\r\n        var type = objectType;\r\n        do\r\n        {\r\n            var kno" +
                    "wnTypeAttributes = System.Reflection.IntrospectionExtensions.GetTypeInfo(type).G" +
                    "etCustomAttributes(false)\r\n\t\t\t\t.Where(a => a.GetType().Name == \"KnownTypeAttribu" +
                    "te\");\r\n            foreach (dynamic attribute in knownTypeAttributes)\r\n         " +
                    "   {\r\n                if (attribute.Type != null && attribute.Type.Name == discr" +
                    "iminator)\r\n                    return attribute.Type;\r\n                else if (" +
                    "attribute.MethodName != null)\r\n                {\r\n                    var method" +
                    " = System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(type, (string)" +
                    "attribute.MethodName, new System.Type[0]);\r\n                    if (method != nu" +
                    "ll)\r\n                    {\r\n                        var types = (System.Collecti" +
                    "ons.Generic.IEnumerable<System.Type>)method.Invoke(null, new object[0]);\r\n      " +
                    "                  foreach (var knownType in types)\r\n                        {\r\n " +
                    "                           if (knownType.Name == discriminator)\r\n               " +
                    "                 return knownType;\r\n                        }\r\n                 " +
                    "       return null;\r\n                    }\r\n                }\r\n            }\r\n  " +
                    "          type = System.Reflection.IntrospectionExtensions.GetTypeInfo(type).Bas" +
                    "eType;\r\n        } while (type != null);\r\n        return null;\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    internal class JsonInheritanceConverterTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
