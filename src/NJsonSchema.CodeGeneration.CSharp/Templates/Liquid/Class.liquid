{%- if HasDescription -%}
/// <summary>{{ Description | CSharpDocs }}</summary>
{%- endif -%}
{%- if HasDiscriminator -%}
[Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "{{ Discriminator }}")]
{%- for derivedClass in DerivedClasses -%}
[JsonInheritanceAttribute("{{ derivedClass.Key }}", typeof({{ derivedClass.Value }}))]
{%- endfor -%}
{%- endif -%}
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "{{ToolchainVersion}}")]
{{ TypeAccessModifier }} partial class {{ClassName}} {{InheritanceCode}}
{
{%- if RenderInpc -%}
{%- for property in Properties -%}
    private {{ property.Type }} {{ property.FieldName }}{% if property.HasDefaultValue %} = {{ property.DefaultValue }}{% endif -%};
{%- endfor -%}

{%- endif -%}
{%- for property in Properties -%}
{%-   if property.HasDescription -%}
    /// <summary>{{ property.Description | CSharpDocs }}</summary>
{%-   endif -%}
    [Newtonsoft.Json.JsonProperty("{{ property.Name }}", Required = {{ property.JsonPropertyRequiredCode }}{% if property.IsStringEnumArray %}, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter){% endif %})]
{%-   if property.RenderRequiredAttribute -%}
    [System.ComponentModel.DataAnnotations.Required]
{%-   endif -%}
{%-   if property.RenderRangeAttribute -%}
    [System.ComponentModel.DataAnnotations.Range({{ property.RangeMinimumValue }}, {{ property.RangeMaximumValue }})]
{%-   endif -%}
{%-   if property.RenderStringLengthAttribute -%}
    [System.ComponentModel.DataAnnotations.StringLength({{ property.StringLengthMaximumValue }}{% if property.StringLengthMinimumValue > 0 %}, MinimumLength = {{ property.StringLengthMinimumValue }}{% endif %})]
{%-   endif -%}
{%-   if property.RenderRegularExpressionAttribute -%}
    [System.ComponentModel.DataAnnotations.RegularExpression(@"{{ property.RegularExpressionValue }}")]
{%-   endif -%}
{%-   if(property.IsStringEnum -%}
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
{%-   endif -%}
{%-   if(property.IsDate -%}
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
{%-   endif -%}
    public {{ property.Type }} {{ property.PropertyName }}{% if RenderInpc == false %} { get; {% if property.HasSetter %}set; {% endif %}}{% if property.HasDefaultValue %} = {{ property.DefaultValue }};{% endif %}{% else %}
    {
        get { return {{ property.FieldName }}; }
{%-     if property.HasSetter -%}
        set 
        {
            if ({{ property.FieldName }} != value)
            {
                {{ property.FieldName }} = value; 
                RaisePropertyChanged();
            }
        }
{%-     endif -%}
    }
{%-   endif %}

{%- endfor -%}
{%- if HasAdditionalPropertiesType -%}
    private System.Collections.Generic.IDictionary<string, {{ AdditionalPropertiesType }}> _additionalProperties = new System.Collections.Generic.Dictionary<string, {{ AdditionalPropertiesType }}>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, {{ AdditionalPropertiesType }}> AdditionalProperties
    {
        get { return _additionalProperties; }
        set { _additionalProperties = value; }
    }

{%- endif -%}
    {% template ToJson %}
    
    {% template FromJson %}
{%- if RenderInpc -%}

    {% template Inpc %}
{%- endif -%}
}