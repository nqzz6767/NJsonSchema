<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
<#if(Model.HasDescription){#>/** <#=Model.Description#> */
<#}#>export class <#=Model.Class#><#=Model.Inheritance#> {
<#foreach (var property in Model.Properties){#>
<#  if(property.HasDescription){#>
    /** <#=property.Description#> */
<#  }#>
    <#if(property.IsReadOnly){#>readonly <#}#><#=property.PropertyName#> = <#if(property.IsArray){#>ko.observableArray<<#=property.ArrayItemType#>>(<#if(property.HasDefaultValue){#><#=property.DefaultValue#><#}#>)<#}else{#>ko.observable<<#=property.Type#>>(<#if(property.HasDefaultValue){#><#=property.DefaultValue#><#}#>)<#}#>;
<#}#>

<#if(Model.HasDiscriminator){#>

    protected _discriminator: string;
<#}#>

<#if(Model.HasBaseDiscriminator){#>
    constructor() {
<#if(Model.HasInheritance){#>
        super();
<#}#>
        this._discriminator = "<#=Model.DiscriminatorName#>";
    }
<#}#>

    init(data?: any<#if(Model.HandleReferences){#>, mappings?: any<#}#>) {
<#if(Model.HasInheritance){#>
        super.init(data);
<#}#>
        if (data !== undefined) {
<#foreach(var property in Model.Properties){#>
            var <#=property.PropertyName#>_: <#=property.Type#> = null; 
            <#=ConversionUtilities.Tab(property.ConvertToClassCode, 3)#>
            this.<#=property.PropertyName#>(<#=property.PropertyName#>_);

<#}#>
        }
    }

    static fromJS(data: any<#if(Model.HandleReferences){#>, mappings?: any<#}#>): <#=Model.Class#> {
<#if(Model.HandleReferences){#>
<#  if(Model.HasBaseDiscriminator){#>
<#      foreach (var derivedClass in Model.DerivedClassNames){#>
        if (data["<#=Model.BaseDiscriminator#>"] === "<#=derivedClass#>")
            return createInstance<<#=derivedClass#>>(data, mappings, <#=derivedClass#>);
<#      }#>
        return createInstance<<#=Model.Class#>>(data, mappings, <#=Model.Class#>);
<#  }else{#>
        return createInstance<<#=Model.Class#>>(data, mappings, <#=Model.Class#>);
<#  }#>
<#}else{#>
<#  if(Model.HasBaseDiscriminator){#>
<#      foreach (var derivedClass in Model.DerivedClassNames){#>
        if (data["<#=Model.BaseDiscriminator#>"] === "<#=derivedClass#>") {
            let result = new <#=derivedClass#>();
            result.init(data);
            return result;
        }
<#      }#>
<#  }#>
        let result = new <#=Model.Class#>();
        result.init(data);
        return result;
<#}#>
    }

    toJSON(data?: any) {
        data = data === undefined ? {} : data;
<#if(Model.HasDiscriminator){#>
        data["<#=Model.BaseDiscriminator#>"] = this._discriminator; 
<#}#>
<#foreach (var property in Model.Properties){#>
        var <#=property.PropertyName#>_ = this.<#=property.PropertyName#>(); 
        <#=ConversionUtilities.Tab(property.ConvertToJavaScriptCode, 2)#>

<#} if(Model.HasInheritance){#>
        super.toJSON(data);
<#}#>
        return data; 
    }
<#if(Model.GenerateCloneMethod){#>

    clone() {
        const json = this.toJSON();
        let result = new <#=Model.Class#>();
        result.init(json);
        return result;
    }
<#}#>
}