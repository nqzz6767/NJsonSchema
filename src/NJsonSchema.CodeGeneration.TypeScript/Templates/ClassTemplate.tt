<#@ template visibility="internal" #>
<#if(Model.HasDescription){#>
/** <#=Model.Description#> */
<#}#>export class <#=Model.Class#><#=Model.Inheritance#> {
<#foreach(var property in Model.Properties){#>
<#  if(property.HasDescription){#>
    /** <#=property.Description#> */
<#  }#>
    <#if(property.IsReadOnly){#>readonly <#}#><#=property.PropertyName#><#if(property.IsOptional){#>?<#}#>: <#=property.Type#><#=property.TypePostfix#><#if(property.HasDefaultValue){#> = <#=property.DefaultValue#><#}#>;
<#}#>
<#if(Model.HasIndexerProperty){#>

    [key: string]: <#=Model.IndexerPropertyValueType#>; 
<#}#>
<#if(Model.HasDiscriminator){#>

    protected _discriminator: string;
<#}#>

<#if(Model.GenerateConstructorInterface || Model.HasBaseDiscriminator){#>
    constructor(<#if(Model.GenerateConstructorInterface){#>data?: I<#=Model.Class#><#}#>) {
<#    if(Model.HasInheritance){#>
        super(<#if(Model.GenerateConstructorInterface){#>data<#}#>);
<#    }else if(Model.GenerateConstructorInterface){#>
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
<#    }#>
<#    if(Model.HasBaseDiscriminator){#>
        this._discriminator = "<#=Model.DiscriminatorName#>";
<#    }#>
    }
<#}#>

    init(data?: any<#if(Model.HandleReferences){#>, _mappings?: any<#}#>) {
<#if(Model.HasInheritance){#>
        super.init(data);
<#}#>
        if (data) {
<#if(Model.HasIndexerProperty){#>
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
<#}#>
<#foreach (var property in Model.Properties){#>
            <#=ConversionUtilities.Tab(property.ConvertToClassCode, 3)#>
<#}#>
        }
    }

    static fromJS(data: any<#if(Model.HandleReferences){#>, _mappings?: any<#}#>): <#=Model.Class#> {
<#if(Model.HandleReferences){#>
<#  if(Model.HasBaseDiscriminator){#>
<#      foreach (var derivedClass in Model.DerivedClassNames){#>
        if (data["<#=Model.BaseDiscriminator#>"] === "<#=derivedClass#>")
            return createInstance<<#=derivedClass#>>(data, _mappings, <#=derivedClass#>);
<#      }#>
        return createInstance<<#=Model.Class#>>(data, _mappings, <#=Model.Class#>);
<#  }else{#>
        return createInstance<<#=Model.Class#>>(data, _mappings, <#=Model.Class#>);
<#  }#>
<#}else{#>
<#  if(Model.HasBaseDiscriminator){#>
<#      foreach (var derivedClass in Model.DerivedClassNames){#>
        if (data["<#=Model.BaseDiscriminator#>"] === "<#=derivedClass#>") {
            let result = new <#=derivedClass#>();
            result.init(data);
            return result;
        }
<#      }#>
<#  }#>
        let result = new <#=Model.Class#>();
        result.init(data);
        return result;
<#}#>
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
<#if(Model.HasIndexerProperty){#>
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
<#}#>
<#if(Model.HasDiscriminator){#>
        data["<#=Model.BaseDiscriminator#>"] = this._discriminator; 
<#}#>
<#foreach (var property in Model.Properties){#>
        <#=ConversionUtilities.Tab(property.ConvertToJavaScriptCode, 2)#>
<#}#>
<#if(Model.HasInheritance){#>
        super.toJSON(data);
<#}#>
        return data; 
    }
<#if(Model.GenerateCloneMethod){#>

    clone() {
        const json = this.toJSON();
        let result = new <#=Model.Class#>();
        result.init(json);
        return result;
    }
<#}#>
}
<#if(Model.GenerateConstructorInterface){#>

<#  if(Model.HasDescription){#>
/** <#=Model.Description#> */
<#  }#>
export interface I<#=Model.Class#><#=Model.InterfaceInheritance#> {
<#  foreach(var property in Model.Properties){#>
<#      if(property.HasDescription){#>
    /** <#=property.Description#> */
<#      }#>
    <#=property.PropertyName#><#if(property.IsOptional){#>?<#}#>: <#=property.Type#><#=property.TypePostfix#>;
<#  }#>
<#  if(Model.HasIndexerProperty){#>

    [key: string]: <#=Model.IndexerPropertyValueType#>; 
<#  }#>
}
<#}#>