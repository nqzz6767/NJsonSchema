<#@ template visibility="internal" #>
<#if(Model.HasDescription){#>/** <#=Model.Description#> */
<#}#>export class <#=Model.Class#><#=Model.Inheritance#> {
<#foreach(var property in Model.Properties){#>
<#  if(property.HasDescription){#>
    /** <#=property.Description#> */
<#  }#>
    <#if(property.IsReadOnly){#>readonly <#}#><#=property.PropertyName#><#if(property.IsOptional){#>?<#}#>: <#=property.Type#><#if(Model.SupportsStrictNullChecks){#><#if(property.IsNullable){#> | null<#}#> | undefined<#}#><#if(property.HasDefaultValue){#> = <#=property.DefaultValue#><#}#>;
<#}#>
<#if(Model.HasIndexerProperty){#>

    [key: string]: <#=Model.IndexerPropertyValueType#>; 
<#}#>
<#if(Model.HasDiscriminator){#>

    protected _discriminator: string;
<#}#>

<#if(Model.HasBaseDiscriminator){#>
    constructor() {
<#if(Model.HasInheritance){#>
        super();
<#}#>
        this._discriminator = "<#=Model.DiscriminatorName#>";
    }
<#}#>

    initialize(data?: any<#if(Model.HandleReferences){#>, mappings?: any<#}#>) {
<#if(Model.HasInheritance){#>
        super.initialize(data);
<#}#>
        if (data !== undefined) {
<#if(Model.HasIndexerProperty){#>
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
<#}#>
<#foreach (var property in Model.Properties){#>
            <#=ConversionUtilities.Tab(property.ConvertToClassCode, 3)#>
<#}#>
        }
    }

    static fromJS(data: any<#if(Model.HandleReferences){#>, mappings?: any<#}#>): <#=Model.ActualClass#> {
<#if(Model.HandleReferences){#>
<#  if(Model.HasBaseDiscriminator){#>
<#      foreach (var derivedClass in Model.DerivedClassNames){#>
        if (data["<#=Model.BaseDiscriminator#>"] === "<#=derivedClass#>")
			return ci<<#=derivedClass#>>(data, mappings, () => new <#=derivedClass#>());
<#      }#>
        return ci<<#=Model.ActualClass#>>(data, mappings, () => new <#=Model.ActualClass#>());
<#  }else{#>
        return ci<<#=Model.ActualClass#>>(data, mappings, () => new <#=Model.ActualClass#>());
<#  }#>
<#}else{#>
<#  if(Model.HasBaseDiscriminator){#>
<#      foreach (var derivedClass in Model.DerivedClassNames){#>
        if (data["<#=Model.BaseDiscriminator#>"] === "<#=derivedClass#>") {
			let result = new <#=derivedClass#>();
			result.initialize(data);
            return result;
        }
<#      }#>
<#  }#>
        let result = new <#=Model.ActualClass#>();
		result.initialize();
        return result;
<#}#>
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
<#if(Model.HasIndexerProperty){#>
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
<#}#>
<#if(Model.HasDiscriminator){#>
        data["<#=Model.BaseDiscriminator#>"] = this._discriminator; 
<#}#>
<#foreach (var property in Model.Properties){#>
        <#=ConversionUtilities.Tab(property.ConvertToJavaScriptCode, 2)#>
<#}#>
<#if(Model.HasInheritance){#>
        super.toJS(data);
<#}#>
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}