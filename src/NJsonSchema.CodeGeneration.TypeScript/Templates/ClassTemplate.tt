<#@ template visibility="internal" #>
<#if(Model.HasDescription){#>/** <#=Model.Description#> */
<#}#>export class <#=Model.Class#><#=Model.Inheritance#> {
<#foreach(var property in Model.Properties){#>
<#  if(property.HasDescription){#>
    /** <#=property.Description#> */
<#  }#>
    <#if(property.IsReadOnly){#>readonly <#}#><#=property.PropertyName#><#if(property.IsOptional){#>?<#}#>: <#=property.Type#><#if(Model.SupportsStrictNullChecks){#><#if(property.IsNullable){#> | null<#}#> | undefined<#}#><#if(property.HasDefaultValue){#> = <#=property.DefaultValue#><#}#>;
<#}#>
<#if(Model.HasIndexerProperty){#>

    [key: string]: <#=Model.IndexerPropertyValueType#>; 
<#}#>
<#if(Model.HasDiscriminator){#>

    protected _discriminator: string;
<#}#>

    constructor(data?: any) {
<#if(Model.HasInheritance){#>
        super(data);
<#}#>
<#if(Model.HasBaseDiscriminator){#>
        this._discriminator = "<#=Model.DiscriminatorName#>";
<#}#>
        if (data !== undefined) {
<#foreach (var property in Model.Properties){#>
            <#=ConversionUtilities.Tab(property.ConvertToClassCode, 3)#>
<#}#>
        }
    }

    static fromJS(data: any): <#=Model.ActualClass#> {
<#if(Model.HasBaseDiscriminator){
    foreach (var derivedClass in Model.DerivedClassNames){#>
        if (data["<#=Model.BaseDiscriminator#>"] === "<#=derivedClass#>")
            return new <#=derivedClass#>(data);
<#  }#>
        return new <#=Model.ActualClass#>(data);
<#}else{#>
        return new <#=Model.ActualClass#>(data);
<#}#>
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
<#if(Model.HasDiscriminator){#>
        data["<#=Model.BaseDiscriminator#>"] = this._discriminator; 
<#}#>
<#foreach (var property in Model.Properties){#>
        <#=ConversionUtilities.Tab(property.ConvertToJavaScriptCode, 2)#>
<#} if(Model.HasInheritance){#>
        super.toJS(data);
<#}#>
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new <#=Model.ActualClass#>(JSON.parse(json));
    }
}