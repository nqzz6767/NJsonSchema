<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)\NJsonSchema\bin\Debug\NJsonSchema.dll" #>
<#@ assembly name="$(SolutionDir)\NJsonSchema.CodeGeneration\bin\Debug\NJsonSchema.CodeGeneration.dll" #>
<#@ assembly name="$(SolutionDir)\Jsdl.CodeGeneration\bin\Debug\Jsdl.CodeGeneration.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ import namespace="NJsonSchema" #>
<#@ import namespace="NJsonSchema.CodeGeneration.Generators" #>
<#@ import namespace="Jsdl.CodeGeneration" #>
<#@ import namespace="Jsdl.CodeGeneration.Generators" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var service = new JsdlService();
    service.Name = "DataService";
    service.Operations.Add(new JsdlOperation
    {
        Name = "Foo", 
        Target = "api/Sum/{0}/{1}",
        Method = JsdlOperationMethod.Post,
        Parameters = new List<JsdlParameter>
        {
            new JsdlParameter
            {
                Name = "a", 
                ParameterType = JsdlParameterType.segment,
                SegmentPosition = 0, 
                Type = JsonObjectType.Integer
            }, 
            new JsdlParameter
            {
                Name = "b", 
                ParameterType = JsdlParameterType.segment,
                SegmentPosition = 1, 
                Type = JsonObjectType.Integer
            }, 
            new JsdlParameter
            {
                Name = "c", 
                ParameterType = JsdlParameterType.json,
                Type = JsonObjectType.Object
            }, 
        },
        Returns = new JsonSchema4
        {
            Type = JsonObjectType.Integer,
        }
    });

    var generator = new CSharpJsdlServiceGenerator(service);
    //generator.Class = provider.CreateEscapedIdentifier(Path.GetFileNameWithoutExtension(Host.TemplateFile));
	generator.Namespace = Host.ResolveParameterValue("directiveId", "namespaceDirectiveProcessor", "namespaceHint");
    var code = generator.GenerateFile();
#>
<#= code #>